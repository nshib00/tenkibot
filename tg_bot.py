from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import os
import logging
from random import choice
from datetime import datetime

from owm_weather import get_weather_data as get_owm_weather
from gismeteo_weather import get_weather as get_gismeteo_weather
import utils
import bot_keyboard


logger = logging.getLogger(name='weather.tg_bot')
logging.basicConfig(level=logging.INFO)

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class BotStatesGroup(StatesGroup):
    owm_city = State()
    gismeteo_city = State()


async def on_startup(_):
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')

async def on_shutdown(_):
    logger.info('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.')


def get_weather(site: str, city: str = '') -> str:
    now = datetime.now().strftime('%d.%m.%Y %H:%M')
    weather_data_str = f'<em>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–∞ {now}</em>\n'

    if site == 'owm':
        weather_data = get_owm_weather(city=city)
        weather_data_str += utils.make_owm_weather_data_string(weather_data)
    elif site == 'gismeteo':
        weather_data = get_gismeteo_weather(city='')
        weather_data_str += utils.make_gismeteo_weather_data_string(weather_data)
    return weather_data_str


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    kb = bot_keyboard.make_start_keyboard()
    await bot.send_message(
        chat_id=message.from_id, 
        text='–ü—Ä–∏–≤–µ—Ç! –Ø <b>TenkiBot</b>, —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n–í—ã–±–µ—Ä–∏ —Å–∞–π—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.',
        reply_markup=kb,
        parse_mode='HTML'
    )


@dp.message_handler(commands=['about'])
async def send_description(message: types.Message) -> None:
    description = '''
        <b><em>TenkiBot v1.0</em></b>
        –ë–æ—Ç —É–º–µ–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å —Å–∞–π—Ç–æ–≤ <b>OpenWeatherMap</b> –∏ <b>Gismete–æ</b>.
        –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –≤–∑—è—Ç—ã —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
        <em>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.</em>

        <em>–° —Å–∞–π—Ç–∞ OpenWeatherMap –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É.</em>
        <em>–° —Å–∞–π—Ç–∞ Gismeteo –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é (–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∞–º —Å–∞–π—Ç Gismeteo).</em>
    '''
    await message.answer(description, parse_mode='HTML')


@dp.message_handler()
async def heart_echo(message: types.Message) -> None:
    if message.text in '‚ù§Ô∏èüíóüíûüíïüíñü•∞üòòüß°üíõüíöüíôüíúüñ§ü§çü§éüíùüíìüíü':
        heart = choice( ['‚ù§Ô∏è', 'üíõ', 'üß°', 'üíú'] )
        await message.answer(heart)


async def print_weather_data(site: str, message: types.Message, city:str|None=None) -> None:
    kb = bot_keyboard.make_back_button_keyboard()
    try:
        if city is not None:
            weather_info = get_weather(site=site, city=city)
        else:
            weather_info = get_weather(site)
        await message.answer(weather_info, parse_mode='HTML', reply_markup=kb)
    except KeyError:
        await message.answer('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞.', reply_markup=kb)
    except Exception as exc:
        logger.error(exc)
        await message.answer('–í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.', reply_markup=kb)


async def load_city(message: types.Message, state: FSMContext, site: str) -> None:
    async with state.proxy() as data:
        data['city'] = message.text
    await print_weather_data(site='owm', city=data['city'], message=message)
    await state.finish()


@dp.message_handler(state=BotStatesGroup.owm_city) 
async def load_owm_city(message: types.Message, state: FSMContext) -> None:
    await load_city(message, state, site='owm')


# @dp.message_handler(state=BotStatesGroup.gismeteo_city)
# async def load_gismeteo_city(message: types.Message, state: FSMContext) -> None:
#     await load_city(message, state, site='gismeteo')


@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery) -> None:
    match callback.data:
        case 'owm':
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.')
            await BotStatesGroup.owm_city.set()   
        case 'gismeteo':
            await print_weather_data(site='gismeteo', message=callback.message)
            # await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.')
            # await BotStatesGroup.gismeteo_city.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
